---
- name: Collect disks
  ansible.builtin.set_fact:
    disks: "{{ disks | default({}) | combine({item.key:item.value.serial}) }}"
  when:
  - item.key.startswith("sd") or item.key.startswith("nvme")
  with_dict: "{{ ansible_devices }}"
- name: Collect parity disks
  ansible.builtin.set_fact:
    parity_disks: "{{ parity_disks|default([]) + ['/dev/' + item.key] }}"
  when: item.value in storage.parity.serials
  with_dict: "{{ disks }}"
- name: Collect data disks
  ansible.builtin.set_fact:
    data_disks: "{{ data_disks|default([]) + ['/dev/' + item.key] }}"
  when:
  - not item.value in storage.parity.serials
  - item.key.startswith("sd")
  with_dict: "{{ disks }}"
- name: Collect appdata disks
  ansible.builtin.set_fact:
    appdata_disks: "{{ appdata_disks|default([]) + ['/dev/' + item.key] }}"
  when: item.value in storage.appdata.serials
  with_dict: "{{ disks }}"
- name: Create appdata directories
  ansible.builtin.file:
    path: "{{ item.value.path }}"
    state: directory
  with_dict: "{{ storage.appdata.paths }}"
- name: Create appdata volume group
  community.general.lvg:
    vg: "{{ storage.appdata.vg_name }}"
    pvs: "{{ appdata_disks | join(',') }}"
- name: Create appdata logical volumes
  community.general.lvol:
    vg: "{{ storage.appdata.vg_name }}"
    lv: "{{ item.value.lv_name }}"
    pvs: "{{ appdata_disks | join(',') }}"
#    opts: "--type raid0 --stripes {{ appdata_disks | length }}"
    size: "{{ item.value.size }}"
  with_dict: "{{ storage.appdata.paths }}"
- name: Set opt filesystem
  community.general.filesystem:
    dev: "{{ '/dev/mapper/' + storage.appdata.vg_name + '-' + item.value.lv_name }}"
    fstype: "{{ item.value.filesystem }}"
  with_dict: "{{ storage.appdata.paths }}"
- name: Mount appdata directories
  ansible.posix.mount:
    state: mounted
    backup: yes
    dump: 0
    fstype: "{{ item.value.filesystem }}"
    opts: defaults
    passno: 2
    path: "{{ item.value.path }}"
    src: "{{ '/dev/mapper/' + storage.appdata.vg_name + '-' + item.value.lv_name }}"
  with_dict: "{{ storage.appdata.paths }}"
- name: Create media directory
  ansible.builtin.file:
    path: "{{ storage.media.path + '/' + item.value }}"
    state: directory
  when:
  - not item.value in storage.parity.serials
  - item.key.startswith("sd")
  with_dict: "{{ disks }}"
- name: Create partitions for media disks
  community.general.parted:
    device: "{{ item }}"
    label: gpt
    number: 1
    state: present
    fs_type: "{{ storage.media.filesystem }}"
  loop: "{{ data_disks }}"
- name: Create filesystem for media disks
  community.general.filesystem:
    dev: "{{ item + '1' }}"
    fstype: "{{ storage.media.filesystem }}"
  loop: "{{ data_disks }}"
- name: Mount media directory
  ansible.posix.mount:
    state: mounted
    backup: yes
    dump: 0
    fstype: "{{ storage.media.filesystem }}"
    opts: defaults
    passno: 2
    path: "{{ storage.media.path + '/' + item.value }}"
    src: "{{ '/dev/' + item.key + '1' }}"
  when:
  - not item.value in storage.parity.serials
  - item.key.startswith("sd")
  with_dict: "{{ disks }}"
- name: Create parity directory
  ansible.builtin.file:
    path: "{{ storage.parity.path + '/' + item.value }}"
    state: directory
  when:
  - item.value in storage.parity.serials
  - item.key.startswith("sd")
  with_dict: "{{ disks }}"
- name: Create partitions for parity disks
  community.general.parted:
    device: "{{ item }}"
    label: gpt
    number: 1
    state: present
    fs_type: "{{ storage.parity.filesystem }}"
  loop: "{{ parity_disks }}"
- name: Create filesystem for parity disks
  community.general.filesystem:
    dev: "{{ item + '1' }}"
    fstype: "{{ storage.parity.filesystem }}"
  loop: "{{ parity_disks }}"
- name: Mount parity directory
  ansible.posix.mount:
    state: mounted
    backup: yes
    dump: 0
    fstype: "{{ storage.parity.filesystem }}"
    opts: defaults
    passno: 2
    path: "{{ storage.parity.path + '/' + item.value }}"
    src: "{{ '/dev/' + item.key + '1' }}"
  when:
  - item.value in storage.parity.serials
  - item.key.startswith("sd")
  with_dict: "{{ disks }}"
...
